/** \page uDN_ACM4TR_01_Regs DesNote/ARM Cortex M4 and Tr 01: Registers

Here's how Tr handles registers, especially during context switching.
Exception stacking is per ARM Cortex M4 standard.

\code
/*
Context Register View

    r0   a1       Scratch register      (exception sp[0])
    r1   a2       Scratch register      ( "        sp[4])
    r2   a3       Scratch register      ( "        sp[8])
    r3   a4       Scratch register      ( "        sp[12])
    r4   v1       Register variable     ( "        not stacked)
    r5   v2       Register variable       "
    r6   v3       Register variable       "
    r7   v4       Register variable       "
    r8   v5       Register variable       "
    r9   v6/rfp   Register variable/rfp   "
   r10   sl       Stack limit             "
   r11   fp       Argument pointer        "
   r12   ip       Temporary workspace   (exception sp[16])
   r13   sp       Stack pointer         (exception not stacked, but may switch
                                        from process to main sp)
   r14   lr       Link register         (exception sp[20], and then
                                         filled in with execption return)
   r15   pc       Program counter       (exception sp[24], and then
                                         filled in with interrupt vector execute).
   -- Also:
   xPSR                                 (exception sp[28])

   
+  hi-mem to lo-mem
|
v

Context Stack View:
What's Saved By Exception/Interrupt Activation 
On The Caller's Stack

sp[28] ->   xPSR           program status register
            r15   pc       Program counter
            r14   lr       Link register
            r12   ip       Temporary workspace
             r3   a4       Scratch register              
             r2   a3       Scratch register             Identical to
             r1   a2       Scratch register             exception stacking.
sp[00] ->    r0   a1       Scratch register             |
                                                    <---+
                                                    
What's Saved By Tr On The Task's ARM Cortex M4 TCB

            r11   fp       Argument pointer
            r10   sl       Stack limit            
             r9   v6/rfp   Register variable/rfp   
             r8   v5       Register variable       
             r7   v4       Register variable       
             r6   v3       Register variable            Put on
             r5   v2       Register variable            by Tr
             r4   v1       Register variable            |
                                                    <---+

Notes

o  sp is the updated stack pointer; also saved in TCB data too.
o  It's already assumed the kernel data structure is saved in TCB.
*/
\endcode

*
* \author Alfred O Fingulin FinguPublic@gmail.com
*/
